<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Part extends Admin_Controller
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Part_model');
    }

    /*
     * Listing of part
     */
    function index()
    {
        $this->load->library('form_validation');

        $this->form_validation->set_rules('name', 'Name', 'required');
        $this->form_validation->set_rules('model_id', 'Model', 'required');
        $this->form_validation->set_rules('unit_price', 'Price', 'required');

        if ($this->form_validation->run()) {
            // print_r($_FILES);
            // exit;
            $params = array(
                'model_id' => $this->input->post('model_id'),
                'created_by' => $this->session->userdata('id'),
                'name' => $this->input->post('name'),
                'seller_id' => $this->session->userdata('id'),
                'qty' => $this->input->post('qty'),
                'unit_price' => $this->input->post('unit_price'),
                'description' => $this->input->post('description')
            );
            if ($_FILES['image_name']['name'] != '') {
                $config['upload_path'] = $_SERVER['DOCUMENT_ROOT'] . '/laptop_parts/images/parts/';
                $config['allowed_types'] = 'gif|jpg|png|jepg|JPG|PNG|JPEG';
                $config['max_size'] = 2000;
                $config['max_width'] = 1280;
                $config['max_height'] = 1280;

                $this->load->library('upload', $config);

                if ($this->upload->do_upload('image_name')) {
                    $img_data = $this->upload->data();
                    $params['image_name'] = $img_data['file_name'];
                } else {
                    print_r($config['upload_path']);
                    print_r($this->upload->display_errors());
                    exit;
                }
            }

            $part_id = $this->Part_model->add_part($params);
            redirect('part_management');
        } else {
            $data['brands'] = $this->db->get('brand')->result_array();
            $data['_view'] = 'part/index';
            $this->load->view('layouts/main', $data);
        }
    }

    function get_model_by_series($series_id)
    {
        $data = $this->db->get_where('model', array('series_id' => $series_id))->result_array();
        foreach ($data as $key => $value) {
            echo "<option value='" . $value['id'] . "'>" . $value['name'] . "</option>";
        }
    }
    function get_list()
    {
        $columns = array(
            0 => 'id',
            1 => 'name',
            2 => 'image_name',
            3 => 'brand_name',
            4 => 'series_name',
            5 => 'model_name',
            6 => 'seller',
            7 => 'qty',
            8 => 'unit_price',
            9 => 'description',
            10 => 'id',
        );

        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];

        $totalData = $this->Part_model->get_all_part_count();

        $totalFiltered = $totalData;

        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Part_model->get_all_part($limit, $start, $order, $dir);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Part_model->part_search($limit, $start, $search, $order, $dir);

            $totalFiltered = $this->Part_model->part_search_count($search);
        }

        $data = array();
        if (!empty($posts)) {
            foreach ($posts as $post) {

                $nestedData['id'] = $post->id;
                $nestedData['name'] = $post->name;
                $nestedData['image'] = "<img class='dt-image' src='".ASSET_URL."images/parts/".$post->image_name."' />";
                $nestedData['brand'] = $post->brand_name;
                $nestedData['series'] = $post->series_name;
                $nestedData['model'] = $post->model_name;  
                $nestedData['seller'] = $post->seller;  
                $nestedData['qty'] = $post->qty;   
                $nestedData['unit_price'] = $post->unit_price;  
                $nestedData['description'] = $post->description;  
                $nestedData['actions'] = "<button class='btn btn-warning btn-xs'>Edit</button>&nbsp;<button class='btn btn-danger btn-xs'>Delete</button>";

                $data[] = $nestedData;
            }
        }

        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }

    /*
     * Editing a part
     */
    function edit($id)
    {
        // check if the part exists before trying to edit it
        $data['part'] = $this->Part_model->get_part($id);

        if (isset($data['part']['id'])) {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('name', 'Name', 'required');

            if ($this->form_validation->run()) {
                $params = array(
                    'model_id' => $this->input->post('model_id'),
                    'series_id' => $this->input->post('series_id'),
                    'created_by' => $this->input->post('created_by'),
                    'date_created' => $this->input->post('date_created'),
                    'name' => $this->input->post('name'),
                    'seller_id' => $this->input->post('seller_id'),
                    'qty' => $this->input->post('qty'),
                    'unit_price' => $this->input->post('unit_price'),
                    'brand_id' => $this->input->post('brand_id'),
                    'description' => $this->input->post('description'),
                    'image_name' => $this->input->post('image_name'),
                );

                $this->Part_model->update_part($id, $params);
                redirect('part/index');
            } else {
                $this->load->model('Part_model');
                $data['all_model'] = $this->Part_model->get_all_model();

                $data['_view'] = 'part/edit';
                $this->load->view('layouts/main', $data);
            }
        } else
            show_error('The part you are trying to edit does not exist.');
    }

    /*
     * Deleting part
     */
    function remove($id)
    {
        $part = $this->Part_model->get_part($id);

        // check if the part exists before trying to delete it
        if (isset($part['id'])) {
            $this->Part_model->delete_part($id);
            redirect('part/index');
        } else
            show_error('The part you are trying to delete does not exist.');
    }
}
