<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Part_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }

    /*
     * Get part by id
     */
    function get_part($id)
    {
        return $this->db->get_where('part', array('id' => $id))->row_array();
    }

    /*
     * Get all part count
     */
    function get_all_part_count()
    {
        $query = $this
            ->db
            ->get('part');

        return $query->num_rows();
    }

    /*
     * Get all part
     */
    function get_all_part($limit, $start, $col, $dir)
    {
        $this->db->select('part.*, series.name as series_name, brand.name as brand_name, model.name as model_name, user.title as seller');
        $this->db->join('model', 'model.id = part.model_id', 'left outer');
        $this->db->join('user', 'user.id = part.seller_id', 'left outer');
        $this->db->join('series', 'series.id = model.series_id', 'left outer');
        $this->db->join('brand', 'brand.id = series.brand_id', 'left outer');
        $query = $this
            ->db
            ->limit($limit, $start)
            ->order_by($col, $dir)
            ->get('part');

        if ($query->num_rows() > 0) {
            return $query->result();
        } else {
            return null;
        }
    }
    function part_search($limit, $start, $search, $col, $dir)
    {
        $this->db->select('part.*, series.name as series_name, brand.name as brand_name, model.name as model_name, user.title as seller');
        $this->db->join('model', 'model.id = part.model_id', 'left outer');
        $this->db->join('user', 'user.id = part.seller_id', 'left outer');
        $this->db->join('series', 'series.id = model.series_id', 'left outer');
        $this->db->join('brand', 'brand.id = series.brand_id', 'left outer');
        $query = $this
            ->db
            ->like('model.id', $search)
            ->or_like('series.name', $search)
            ->or_like('brand.name', $search)
            ->or_like('model.name', $search)
            ->or_like('user.title', $search)
            ->or_like('part.name', $search)
            ->limit($limit, $start)
            ->order_by($col, $dir)
            ->get('part');


        if ($query->num_rows() > 0) {
            return $query->result();
        } else {
            return null;
        }
    }

    function part_search_count($search)
    {
        $this->db->select('part.*, series.name as series_name, brand.name as brand_name, model.name as model_name, user.title as seller');
        $this->db->join('model', 'model.id = part.model_id', 'left outer');
        $this->db->join('user', 'user.id = part.seller_id', 'left outer');
        $this->db->join('series', 'series.id = model.series_id', 'left outer');
        $this->db->join('brand', 'brand.id = series.brand_id', 'left outer');
        $query = $this
            ->db
            ->like('model.id', $search)
            ->or_like('series.name', $search)
            ->or_like('brand.name', $search)
            ->or_like('model.name', $search)
            ->or_like('user.title', $search)
            ->or_like('part.name', $search)
            ->get('part');

        return $query->num_rows();
    }
    /*
     * function to add new part
     */
    function add_part($params)
    {
        $this->db->insert('part', $params);
        return $this->db->insert_id();
    }

    /*
     * function to update part
     */
    function update_part($id, $params)
    {
        $this->db->where('id', $id);
        return $this->db->update('part', $params);
    }

    /*
     * function to delete part
     */
    function delete_part($id)
    {
        return $this->db->delete('part', array('id' => $id));
    }
}
